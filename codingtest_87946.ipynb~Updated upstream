{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from itertools import permutations"
      ],
      "metadata": {
        "id": "PjBlu0kLz-rh"
      },
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "k = 40\n",
        "dungeons = \t[ [10, 10], [10, 10], [10, 10], [10, 10], [40, 20]]"
      ],
      "metadata": {
        "id": "dWwYb05KpjJv"
      },
      "execution_count": 87,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dungeons"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ySAG5khztGNF",
        "outputId": "30c48d06-38df-4a9f-8946-6e8e822d992a"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[80, 20], [50, 40], [30, 10]]"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Implementation D.F.S\n",
        "---\n",
        "Return the max value of the depth while D.F.S."
      ],
      "metadata": {
        "id": "nZNZiAnK056f"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cnt = 0 \n",
        "for i in range(len(dungeons)):\n",
        "    if k >= dungeons[i][0]:\n",
        "        k -= dungeons[i][1]\n",
        "        cnt += 1"
      ],
      "metadata": {
        "id": "rdQKmY-ptHEk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cnt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FzMXLtHXB8Bj",
        "outputId": "a7301002-8f75-4bdd-da6f-a50617e6b09b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "length = len(dungeons)\n",
        "visited = [False for _ in range(len(dungeons))]"
      ],
      "metadata": {
        "id": "xRzb7IGTB8t6"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "answer = 1\n",
        "def dfs(i, depth, k, dungeons, visited):\n",
        "    global answer\n",
        "    visited[i] = True\n",
        "    print(f\"dungeons : {dungeons[i]}, depth : {depth}\")\n",
        "    for t in range(length):\n",
        "        if not visited[t] and  k >= dungeons[t][0]:\n",
        "            answer = depth+1\n",
        "            dfs(t, depth+1, k-dungeons[t][1], dungeons, visited)"
      ],
      "metadata": {
        "id": "djc8uN26LCSy"
      },
      "execution_count": 68,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dfs(0, 1, k, dungeons, visited)"
      ],
      "metadata": {
        "id": "pnZTdsaaLCup",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e3d1171d-297d-45cd-cf45-97cd7585e819"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dungeons : [80, 20], depth : 1\n",
            "dungeons : [50, 40], depth : 2\n",
            "dungeons : [30, 10], depth : 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "answer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eaMiC0hbQvdJ",
        "outputId": "779f6639-c8ad-4baf-bf3c-570b7a98e13e"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def dfs(i, depth, k, dungeons, visited, length):\n",
        "        global answer\n",
        "        visited[i] = True\n",
        "        print(f\"dungeons : {dungeons[i]}, depth : {depth}, k : {k}, i : {i}\")\n",
        "\n",
        "        for t in range(length):\n",
        "            if (not visited[t]) and  k >= dungeons[t][0]:\n",
        "                answer = depth+1\n",
        "                dfs(t, depth+1, k-dungeons[i][1], dungeons, visited, length)\n",
        "                print(\"=================================\")\n",
        "                visited[t] = False\n",
        "       \n",
        "                \n",
        "def solution(k, dungeons):\n",
        "    global answer\n",
        "    length = len(dungeons)\n",
        "    visited = [False for _ in range(length)]\n",
        "    \n",
        "                \n",
        "    dfs(0, 1, k, dungeons, visited, length)\n",
        "    return answer"
      ],
      "metadata": {
        "id": "hMWgPhbRRWvI"
      },
      "execution_count": 91,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "solution(k, dungeons)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YcaFyOA9SkOq",
        "outputId": "22d0f936-bbdf-486e-e12d-767903d0101d"
      },
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dungeons : [10, 10], depth : 1, k : 40, i : 0\n",
            "dungeons : [10, 10], depth : 2, k : 30, i : 1\n",
            "dungeons : [10, 10], depth : 3, k : 20, i : 2\n",
            "dungeons : [10, 10], depth : 4, k : 10, i : 3\n",
            "=================================\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 3, k : 20, i : 3\n",
            "dungeons : [10, 10], depth : 4, k : 10, i : 2\n",
            "=================================\n",
            "=================================\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 2, k : 30, i : 2\n",
            "dungeons : [10, 10], depth : 3, k : 20, i : 1\n",
            "dungeons : [10, 10], depth : 4, k : 10, i : 3\n",
            "=================================\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 3, k : 20, i : 3\n",
            "dungeons : [10, 10], depth : 4, k : 10, i : 1\n",
            "=================================\n",
            "=================================\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 2, k : 30, i : 3\n",
            "dungeons : [10, 10], depth : 3, k : 20, i : 1\n",
            "dungeons : [10, 10], depth : 4, k : 10, i : 2\n",
            "=================================\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 3, k : 20, i : 2\n",
            "dungeons : [10, 10], depth : 4, k : 10, i : 1\n",
            "=================================\n",
            "=================================\n",
            "=================================\n",
            "dungeons : [40, 20], depth : 2, k : 30, i : 4\n",
            "dungeons : [10, 10], depth : 3, k : 10, i : 1\n",
            "dungeons : [10, 10], depth : 4, k : 0, i : 2\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 4, k : 0, i : 3\n",
            "=================================\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 3, k : 10, i : 2\n",
            "dungeons : [10, 10], depth : 4, k : 0, i : 1\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 4, k : 0, i : 3\n",
            "=================================\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 3, k : 10, i : 3\n",
            "dungeons : [10, 10], depth : 4, k : 0, i : 1\n",
            "=================================\n",
            "dungeons : [10, 10], depth : 4, k : 0, i : 2\n",
            "=================================\n",
            "=================================\n",
            "=================================\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Implemetation with Naive Iterations(Permutation)\n",
        "---\n",
        "Return max value of the cnt while Iteration of available Permutation"
      ],
      "metadata": {
        "id": "nORhlDgz1I_g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cnt = 0\n",
        "for item in permutations(dungeons):\n",
        "    tmp_k = k\n",
        "    tmp = 0\n",
        "    for t in item:\n",
        "        if tmp_k >= t[0]:\n",
        "            tmp_k -= t[1]\n",
        "            tmp += 1\n",
        "        cnt = max(cnt, tmp)"
      ],
      "metadata": {
        "id": "dLf8bTWUSneH"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cnt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XkzOhV9J0CSx",
        "outputId": "c4368a81-d947-44f0-8a3a-d6be6d0a299f"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    }
  ]
}